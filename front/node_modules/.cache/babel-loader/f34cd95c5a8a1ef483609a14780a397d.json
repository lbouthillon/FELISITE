{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louis\\\\killer\\\\front\\\\src\\\\components\\\\utils\\\\ImageUploader.jsx\";\nimport React, { Component } from 'react';\nimport { Modal, Form, Input, Button, Icon, Message } from 'semantic-ui-react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Cropper } from './cropper';\nimport config from '../../config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImageUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = new FormData();\n      data.append('file', this.state.file);\n      axios({\n        method: 'put',\n        url: config.back_Url + this.props.uploadUrl,\n        headers: {\n          Token: localStorage.getItem('killerToken'),\n          'Content-Type': 'multipart/form-data'\n        },\n        data\n      }).then(res => {\n        this.props.handleSubmit(res.data);\n      });\n    };\n\n    this.handleImageChange = event => {\n      event.preventDefault();\n      const reader = new FileReader();\n      const file = event.target.files[0];\n\n      reader.onloadend = () => {\n        this.setState({\n          file,\n          imagePreviewUrl: reader.result\n        });\n      };\n\n      reader.readAsDataURL(file);\n    };\n\n    this.cropSent = croppedImage => {\n      // On récupère l'image croppée\n      this.setState({\n        file: croppedImage\n      });\n    };\n\n    this.state = {\n      file: '',\n      imagePreviewUrl: '',\n      error: ''\n    };\n  }\n\n  render() {\n    const {\n      imagePreviewUrl\n    } = this.state;\n    let ImagePreview = null;\n\n    if (imagePreviewUrl) {\n      ImagePreview = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          overflowY: 'auto',\n          overflowX: 'hidden',\n          whiteSpace: 'nowrap'\n        },\n        children: /*#__PURE__*/_jsxDEV(Cropper, {\n          src: imagePreviewUrl,\n          changeParentFile: this.cropSent,\n          style: {\n            height: '450px'\n          },\n          type: this.props.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      open: this.props.open // class=\"scrolling content\"\n      ,\n      onClose: () => this.props.handleSubmit({}),\n      closeOnEscape: true,\n      closeOnDimmerClick: !this.props.cropper,\n      closeIcon: true,\n      style: {\n        display: 'inline-block',\n        width: '60vw',\n        minHeight: '50vh',\n        padding: '2em'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fileImage\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ui button\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                name: \"file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), this.state.file ? 'Choisir une autre photo' : 'Choisir une photo']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            id: \"fileImage\",\n            type: \"file\",\n            accept: \"image/png, image/jpeg, image/gif\",\n            style: {\n              display: 'none'\n            },\n            onChange: this.handleImageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            positive: true,\n            type: \"submit\",\n            disabled: !this.state.file,\n            onClick: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), \"Importer la photo\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center',\n            marginTop: '40px'\n          },\n          children: \"L\\u2019image ne doit pas d\\xE9passer 1 Mo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), this.state.error !== '' && /*#__PURE__*/_jsxDEV(Message, {\n          error: true,\n          header: \"Erreur\",\n          content: this.state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), ImagePreview]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nImageUploader.propTypes = {\n  uploadUrl: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func,\n  open: PropTypes.bool,\n  cropper: PropTypes.bool,\n  type: PropTypes.string.isRequired\n};\nImageUploader.defaultProps = {\n  open: false,\n  handleSubmit: () => {},\n  cropper: false\n};\nexport default ImageUploader;","map":{"version":3,"sources":["C:/Users/louis/killer/front/src/components/utils/ImageUploader.jsx"],"names":["React","Component","Modal","Form","Input","Button","Icon","Message","axios","PropTypes","Cropper","config","ImageUploader","constructor","props","handleSubmit","event","preventDefault","data","FormData","append","state","file","method","url","back_Url","uploadUrl","headers","Token","localStorage","getItem","then","res","handleImageChange","reader","FileReader","target","files","onloadend","setState","imagePreviewUrl","result","readAsDataURL","cropSent","croppedImage","error","render","ImagePreview","display","justifyContent","overflowY","overflowX","whiteSpace","height","type","open","cropper","width","minHeight","padding","textAlign","marginTop","propTypes","string","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Modal, Form, Input, Button, Icon, Message,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport { Cropper } from './cropper';\r\nimport config from '../../config.json';\r\n\r\nclass ImageUploader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { file: '', imagePreviewUrl: '', error: '' };\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const data = new FormData();\r\n\r\n    data.append('file', this.state.file);\r\n    axios({\r\n      method: 'put',\r\n      url: config.back_Url + this.props.uploadUrl,\r\n      headers: {\r\n        Token: localStorage.getItem('killerToken'),\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n      data,\r\n    }).then((res) => {\r\n      this.props.handleSubmit(res.data);\r\n    });\r\n  };\r\n\r\n  handleImageChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const reader = new FileReader();\r\n    const file = event.target.files[0];\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        file,\r\n        imagePreviewUrl: reader.result,\r\n      });\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  cropSent = (croppedImage) => {\r\n    // On récupère l'image croppée\r\n    this.setState({ file: croppedImage });\r\n  };\r\n\r\n  render() {\r\n    const { imagePreviewUrl } = this.state;\r\n    let ImagePreview = null;\r\n    if (imagePreviewUrl) {\r\n      ImagePreview = (\r\n        <div style={{ display: 'flex', justifyContent: 'center', overflowY:'auto', overflowX: 'hidden', whiteSpace:'nowrap' }}>\r\n          <Cropper\r\n            src={imagePreviewUrl}\r\n            changeParentFile={this.cropSent}\r\n            style={{ height: '450px' }}\r\n            type={this.props.type}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        open={this.props.open}\r\n        // class=\"scrolling content\"\r\n        onClose={() => this.props.handleSubmit({})}\r\n        closeOnEscape\r\n        closeOnDimmerClick={!this.props.cropper}\r\n        closeIcon\r\n        style={{display:'inline-block', width: '60vw', minHeight: '50vh', padding: '2em', }}\r\n      >\r\n        \r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <label htmlFor=\"fileImage\">\r\n              <span className=\"ui button\">\r\n                <Icon name=\"file\" />\r\n                {this.state.file ? 'Choisir une autre photo' : 'Choisir une photo'}\r\n              </span>\r\n            </label>\r\n            <Input\r\n              id=\"fileImage\"\r\n              type=\"file\"\r\n              accept=\"image/png, image/jpeg, image/gif\"\r\n              style={{ display: 'none' }}\r\n              onChange={this.handleImageChange}\r\n            />\r\n\r\n            <Button positive type=\"submit\" disabled={!this.state.file} onClick={this.handleSubmit}>\r\n              <Icon name=\"upload\" />\r\n              Importer la photo\r\n            </Button>\r\n          </Form.Group>\r\n          <p style={{ textAlign: 'center', marginTop: '40px' }}>\r\n            L&rsquo;image ne doit pas dépasser 1 Mo\r\n          </p>\r\n          {this.state.error !== '' && <Message error header=\"Erreur\" content={this.state.error} />}\r\n        </Form>\r\n        {ImagePreview}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nImageUploader.propTypes = {\r\n  uploadUrl: PropTypes.string.isRequired,\r\n  handleSubmit: PropTypes.func,\r\n  open: PropTypes.bool,\r\n  cropper: PropTypes.bool,\r\n  type: PropTypes.string.isRequired,\r\n};\r\n\r\nImageUploader.defaultProps = {\r\n  open: false,\r\n  handleSubmit: () => {},\r\n  cropper: false,\r\n};\r\n\r\nexport default ImageUploader;\r\n"]},"metadata":{},"sourceType":"module"}