{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louis\\\\killer\\\\front\\\\src\\\\components\\\\utils\\\\cropper.jsx\";\nimport React, { PureComponent } from 'react';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from 'react-image-crop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Cropper extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onLoaded = image => {\n      let aspect = 1;\n\n      if (this.props.type === 'user') {\n        aspect = 1.25;\n      }\n\n      const defaultDimension = image.width < image.height ? image.width : image.height;\n      const crop = {\n        x: (image.width - defaultDimension) / 2,\n        y: (image.height - defaultDimension) / 2,\n        width: defaultDimension / aspect,\n        height: defaultDimension,\n        aspect: 1 / aspect\n      };\n      this.setState({\n        isLoaded: false\n      }, () => {\n        this.setState({\n          image,\n          crop\n        }, () => {\n          this.setState({\n            isLoaded: true\n          });\n          this.getCroppedImg(this.state.image, this.state.crop);\n        });\n      });\n    };\n\n    this.onCropChange = crop => {\n      if (this.state.isLoaded) {\n        this.setState({\n          crop\n        });\n      }\n    };\n\n    this.onCropComplete = crop => {\n      if (this.state.image && this.state.crop) {\n        this.getCroppedImg(this.state.image, crop);\n      }\n    };\n\n    this.getCroppedImg = async (image, crop) => {\n      const canvas = document.createElement('canvas');\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = crop.width;\n      canvas.height = crop.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n      canvas.toBlob(blob => this.props.changeParentFile(new File([blob], 'croppedImage.png', {\n        type: 'image/png'\n      })), 'image/png');\n    };\n\n    this.state = {\n      crop: null,\n      image: null,\n      isLoaded: false // Existe car sinon l'asynchrone casse tout\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: this.props.src,\n      crop: this.state.crop,\n      onImageLoaded: this.onLoaded,\n      onChange: this.onCropChange,\n      onComplete: this.onCropComplete,\n      minWidth: 1 // Il fallait bien choisir\n      ,\n      keepSelection: true,\n      imageStyle: this.props.style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Cropper;","map":{"version":3,"sources":["C:/Users/louis/killer/front/src/components/utils/cropper.jsx"],"names":["React","PureComponent","ReactCrop","Cropper","constructor","props","onLoaded","image","aspect","type","defaultDimension","width","height","crop","x","y","setState","isLoaded","getCroppedImg","state","onCropChange","onCropComplete","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","toBlob","blob","changeParentFile","File","render","src","style"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport ReactCrop from 'react-image-crop';\r\n\r\nexport class Cropper extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      crop: null,\r\n      image: null,\r\n      isLoaded: false, // Existe car sinon l'asynchrone casse tout\r\n    };\r\n  }\r\n\r\n  onLoaded = (image) => {\r\n    let aspect = 1\r\n    if(this.props.type === 'user'){\r\n      aspect = 1.25\r\n    }\r\n    const defaultDimension = image.width < image.height ? image.width : image.height;\r\n    const crop = {\r\n      x: (image.width - defaultDimension) / 2,\r\n      y: (image.height - defaultDimension) / 2,\r\n      width: defaultDimension/ aspect,\r\n      height: defaultDimension,\r\n      aspect: 1/aspect,\r\n    };\r\n    this.setState({ isLoaded: false }, () => {\r\n      this.setState(\r\n        {\r\n          image,\r\n          crop,\r\n        },\r\n        () => {\r\n          this.setState({ isLoaded: true });\r\n          this.getCroppedImg(this.state.image, this.state.crop);\r\n        },\r\n      );\r\n    });\r\n  };\r\n\r\n  onCropChange = (crop) => {\r\n    if (this.state.isLoaded) {\r\n      this.setState({ crop });\r\n    }\r\n  };\r\n\r\n  onCropComplete = (crop) => {\r\n    if (this.state.image && this.state.crop) {\r\n      this.getCroppedImg(this.state.image, crop);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This let pass from the crop to a cropped image\r\n   * @param {File} image - Image File Object\r\n   * @param {Object} crop - crop Object\r\n   * @param {String} fileName - Name of the returned file in Promise\r\n   */\r\n  getCroppedImg = async (image, crop) => {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height,\r\n    );\r\n    canvas.toBlob(\r\n      blob =>\r\n        this.props.changeParentFile(new File([blob], 'croppedImage.png', { type: 'image/png' })),\r\n      'image/png',\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ReactCrop\r\n        src={this.props.src}\r\n        crop={this.state.crop}\r\n        onImageLoaded={this.onLoaded}\r\n        onChange={this.onCropChange}\r\n        onComplete={this.onCropComplete}\r\n        minWidth={1} // Il fallait bien choisir\r\n        keepSelection\r\n        imageStyle={this.props.style}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Cropper;\r\n"]},"metadata":{},"sourceType":"module"}