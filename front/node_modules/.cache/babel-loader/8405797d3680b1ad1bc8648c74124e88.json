{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;\n\nvar _numberToWord = require(\"./numberToWord\");\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\n\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\n\n\nvar useKeyOnly = function useKeyOnly(val, key) {\n  return val && key;\n};\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\n\n\nexports.useKeyOnly = useKeyOnly;\n\nvar useValueAndKey = function useValueAndKey(val, key) {\n  return val && val !== true && val + \" \" + key;\n};\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\n\n\nexports.useValueAndKey = useValueAndKey;\n\nvar useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\n  return val && (val === true ? key : val + \" \" + key);\n}; //\n// Prop to className exceptions\n//\n\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\n\n\nexports.useKeyOrValueAndKey = useKeyOrValueAndKey;\n\nvar useMultipleProp = function useMultipleProp(val, key) {\n  if (!val || val === true) return null;\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\n    return prop.replace('-', ' ') + \" \" + key;\n  }).join(' ');\n};\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\n\n\nexports.useMultipleProp = useMultipleProp;\n\nvar useTextAlignProp = function useTextAlignProp(val) {\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\n};\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\n\n\nexports.useTextAlignProp = useTextAlignProp;\n\nvar useVerticalAlignProp = function useVerticalAlignProp(val) {\n  return useValueAndKey(val, 'aligned');\n};\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\n\n\nexports.useVerticalAlignProp = useVerticalAlignProp;\n\nvar useWidthProp = function useWidthProp(val, widthClass, canEqual) {\n  if (widthClass === void 0) {\n    widthClass = '';\n  }\n\n  if (canEqual === void 0) {\n    canEqual = false;\n  }\n\n  if (canEqual && val === 'equal') {\n    return 'equal width';\n  }\n\n  var valType = typeof val;\n\n  if ((valType === 'string' || valType === 'number') && widthClass) {\n    return (0, _numberToWord.numberToWord)(val) + \" \" + widthClass;\n  }\n\n  return (0, _numberToWord.numberToWord)(val);\n};\n\nexports.useWidthProp = useWidthProp;","map":{"version":3,"sources":["C:/Users/louis/Documents/doc/loisirs/interplateau ludique/FELISITE/front/node_modules/semantic-ui-react/dist/commonjs/lib/classNameBuilders.js"],"names":["exports","__esModule","useWidthProp","useVerticalAlignProp","useTextAlignProp","useMultipleProp","useKeyOrValueAndKey","useValueAndKey","useKeyOnly","_numberToWord","require","val","key","replace","split","map","prop","join","widthClass","canEqual","valType","numberToWord"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;\r\n\r\nvar _numberToWord = require(\"./numberToWord\");\r\n\r\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\r\n\r\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\r\nvar useKeyOnly = function useKeyOnly(val, key) {\r\n  return val && key;\r\n};\r\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\r\n\r\n\r\nexports.useKeyOnly = useKeyOnly;\r\n\r\nvar useValueAndKey = function useValueAndKey(val, key) {\r\n  return val && val !== true && val + \" \" + key;\r\n};\r\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\r\n\r\n\r\nexports.useValueAndKey = useValueAndKey;\r\n\r\nvar useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\r\n  return val && (val === true ? key : val + \" \" + key);\r\n}; //\r\n// Prop to className exceptions\r\n//\r\n\r\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\r\n\r\n\r\nexports.useKeyOrValueAndKey = useKeyOrValueAndKey;\r\n\r\nvar useMultipleProp = function useMultipleProp(val, key) {\r\n  if (!val || val === true) return null;\r\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\r\n    return prop.replace('-', ' ') + \" \" + key;\r\n  }).join(' ');\r\n};\r\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\r\n\r\n\r\nexports.useMultipleProp = useMultipleProp;\r\n\r\nvar useTextAlignProp = function useTextAlignProp(val) {\r\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\r\n};\r\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\r\n\r\n\r\nexports.useTextAlignProp = useTextAlignProp;\r\n\r\nvar useVerticalAlignProp = function useVerticalAlignProp(val) {\r\n  return useValueAndKey(val, 'aligned');\r\n};\r\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\r\n\r\n\r\nexports.useVerticalAlignProp = useVerticalAlignProp;\r\n\r\nvar useWidthProp = function useWidthProp(val, widthClass, canEqual) {\r\n  if (widthClass === void 0) {\r\n    widthClass = '';\r\n  }\r\n\r\n  if (canEqual === void 0) {\r\n    canEqual = false;\r\n  }\r\n\r\n  if (canEqual && val === 'equal') {\r\n    return 'equal width';\r\n  }\r\n\r\n  var valType = typeof val;\r\n\r\n  if ((valType === 'string' || valType === 'number') && widthClass) {\r\n    return (0, _numberToWord.numberToWord)(val) + \" \" + widthClass;\r\n  }\r\n\r\n  return (0, _numberToWord.numberToWord)(val);\r\n};\r\n\r\nexports.useWidthProp = useWidthProp;"]},"metadata":{},"sourceType":"script"}