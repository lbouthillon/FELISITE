{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.computeClassNames = computeClassNames;\nexports.computeClassNamesDifference = computeClassNamesDifference;\nexports.default = useClassNamesOnNode;\nexports.NodeRegistry = exports.handleClassNamesChange = void 0;\n\nvar _reactComponentRef = require(\"@fluentui/react-component-ref\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useIsomorphicLayoutEffect = _interopRequireDefault(require(\"./useIsomorphicLayoutEffect\"));\n\nvar CLASS_NAME_DELITIMITER = /\\s+/;\n/**\n * Accepts a set of ref objects that contain classnames as a string and returns an array of unique\n * classNames.\n *\n * @param {Set<React.RefObject>|undefined} classNameRefs\n * @returns String[]\n */\n\nfunction computeClassNames(classNameRefs) {\n  var classNames = [];\n\n  if (classNameRefs) {\n    classNameRefs.forEach(function (classNameRef) {\n      if (typeof classNameRef.current === 'string') {\n        var classNamesForRef = classNameRef.current.split(CLASS_NAME_DELITIMITER);\n        classNamesForRef.forEach(function (className) {\n          classNames.push(className);\n        });\n      }\n    });\n    return classNames.filter(function (className, i, array) {\n      return className.length > 0 && array.indexOf(className) === i;\n    });\n  }\n\n  return [];\n}\n/**\n * Computes classnames that should be removed and added to a node based on input differences.\n *\n * @param {String[]} prevClassNames\n * @param {String[]} currentClassNames\n */\n\n\nfunction computeClassNamesDifference(prevClassNames, currentClassNames) {\n  return [currentClassNames.filter(function (className) {\n    return prevClassNames.indexOf(className) === -1;\n  }), prevClassNames.filter(function (className) {\n    return currentClassNames.indexOf(className) === -1;\n  })];\n}\n\nvar prevClassNames = new Map();\n/**\n * @param {HTMLElement} node\n * @param {Set<React.RefObject>|undefined} classNameRefs\n */\n\nvar handleClassNamesChange = function handleClassNamesChange(node, classNameRefs) {\n  var currentClassNames = computeClassNames(classNameRefs);\n\n  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(node) || [], currentClassNames),\n      forAdd = _computeClassNamesDif[0],\n      forRemoval = _computeClassNamesDif[1];\n\n  if (node) {\n    forAdd.forEach(function (className) {\n      return node.classList.add(className);\n    });\n    forRemoval.forEach(function (className) {\n      return node.classList.remove(className);\n    });\n  }\n\n  prevClassNames.set(node, currentClassNames);\n};\n\nexports.handleClassNamesChange = handleClassNamesChange;\n\nvar NodeRegistry = function NodeRegistry() {\n  var _this = this;\n\n  this.add = function (node, classNameRef) {\n    if (_this.nodes.has(node)) {\n      var _set = _this.nodes.get(node);\n\n      _set.add(classNameRef);\n\n      return;\n    } // IE11 does not support constructor params\n\n\n    var set = new Set();\n    set.add(classNameRef);\n\n    _this.nodes.set(node, set);\n  };\n\n  this.del = function (node, classNameRef) {\n    if (!_this.nodes.has(node)) {\n      return;\n    }\n\n    var set = _this.nodes.get(node);\n\n    if (set.size === 1) {\n      _this.nodes.delete(node);\n\n      return;\n    }\n\n    set.delete(classNameRef);\n  };\n\n  this.emit = function (node, callback) {\n    callback(node, _this.nodes.get(node));\n  };\n\n  this.nodes = new Map();\n};\n\nexports.NodeRegistry = NodeRegistry;\nvar nodeRegistry = new NodeRegistry();\n/**\n * A React hooks that allows to manage classNames on a DOM node in declarative manner. Accepts\n * a HTML element or React ref objects with it.\n *\n * @param {HTMLElement|React.RefObject} node\n * @param {String} className\n */\n\nfunction useClassNamesOnNode(node, className) {\n  var classNameRef = _react.default.useRef();\n\n  var isMounted = _react.default.useRef(false);\n\n  (0, _useIsomorphicLayoutEffect.default)(function () {\n    classNameRef.current = className;\n\n    if (isMounted.current) {\n      var element = (0, _reactComponentRef.isRefObject)(node) ? node.current : node;\n      nodeRegistry.emit(element, handleClassNamesChange);\n    }\n\n    isMounted.current = true;\n  }, [className]);\n  (0, _useIsomorphicLayoutEffect.default)(function () {\n    var element = (0, _reactComponentRef.isRefObject)(node) ? node.current : node;\n    nodeRegistry.add(element, classNameRef);\n    nodeRegistry.emit(element, handleClassNamesChange);\n    return function () {\n      nodeRegistry.del(element, classNameRef);\n      nodeRegistry.emit(element, handleClassNamesChange);\n    };\n  }, [node]);\n}","map":{"version":3,"sources":["C:/Users/louis/killer/front/node_modules/semantic-ui-react/dist/commonjs/lib/hooks/useClassNamesOnNode.js"],"names":["_interopRequireDefault","require","exports","__esModule","computeClassNames","computeClassNamesDifference","default","useClassNamesOnNode","NodeRegistry","handleClassNamesChange","_reactComponentRef","_react","_useIsomorphicLayoutEffect","CLASS_NAME_DELITIMITER","classNameRefs","classNames","forEach","classNameRef","current","classNamesForRef","split","className","push","filter","i","array","length","indexOf","prevClassNames","currentClassNames","Map","node","_computeClassNamesDif","get","forAdd","forRemoval","classList","add","remove","set","_this","nodes","has","_set","Set","del","size","delete","emit","callback","nodeRegistry","useRef","isMounted","element","isRefObject"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.computeClassNames = computeClassNames;\nexports.computeClassNamesDifference = computeClassNamesDifference;\nexports.default = useClassNamesOnNode;\nexports.NodeRegistry = exports.handleClassNamesChange = void 0;\n\nvar _reactComponentRef = require(\"@fluentui/react-component-ref\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useIsomorphicLayoutEffect = _interopRequireDefault(require(\"./useIsomorphicLayoutEffect\"));\n\nvar CLASS_NAME_DELITIMITER = /\\s+/;\n/**\n * Accepts a set of ref objects that contain classnames as a string and returns an array of unique\n * classNames.\n *\n * @param {Set<React.RefObject>|undefined} classNameRefs\n * @returns String[]\n */\n\nfunction computeClassNames(classNameRefs) {\n  var classNames = [];\n\n  if (classNameRefs) {\n    classNameRefs.forEach(function (classNameRef) {\n      if (typeof classNameRef.current === 'string') {\n        var classNamesForRef = classNameRef.current.split(CLASS_NAME_DELITIMITER);\n        classNamesForRef.forEach(function (className) {\n          classNames.push(className);\n        });\n      }\n    });\n    return classNames.filter(function (className, i, array) {\n      return className.length > 0 && array.indexOf(className) === i;\n    });\n  }\n\n  return [];\n}\n/**\n * Computes classnames that should be removed and added to a node based on input differences.\n *\n * @param {String[]} prevClassNames\n * @param {String[]} currentClassNames\n */\n\n\nfunction computeClassNamesDifference(prevClassNames, currentClassNames) {\n  return [currentClassNames.filter(function (className) {\n    return prevClassNames.indexOf(className) === -1;\n  }), prevClassNames.filter(function (className) {\n    return currentClassNames.indexOf(className) === -1;\n  })];\n}\n\nvar prevClassNames = new Map();\n/**\n * @param {HTMLElement} node\n * @param {Set<React.RefObject>|undefined} classNameRefs\n */\n\nvar handleClassNamesChange = function handleClassNamesChange(node, classNameRefs) {\n  var currentClassNames = computeClassNames(classNameRefs);\n\n  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(node) || [], currentClassNames),\n      forAdd = _computeClassNamesDif[0],\n      forRemoval = _computeClassNamesDif[1];\n\n  if (node) {\n    forAdd.forEach(function (className) {\n      return node.classList.add(className);\n    });\n    forRemoval.forEach(function (className) {\n      return node.classList.remove(className);\n    });\n  }\n\n  prevClassNames.set(node, currentClassNames);\n};\n\nexports.handleClassNamesChange = handleClassNamesChange;\n\nvar NodeRegistry = function NodeRegistry() {\n  var _this = this;\n\n  this.add = function (node, classNameRef) {\n    if (_this.nodes.has(node)) {\n      var _set = _this.nodes.get(node);\n\n      _set.add(classNameRef);\n\n      return;\n    } // IE11 does not support constructor params\n\n\n    var set = new Set();\n    set.add(classNameRef);\n\n    _this.nodes.set(node, set);\n  };\n\n  this.del = function (node, classNameRef) {\n    if (!_this.nodes.has(node)) {\n      return;\n    }\n\n    var set = _this.nodes.get(node);\n\n    if (set.size === 1) {\n      _this.nodes.delete(node);\n\n      return;\n    }\n\n    set.delete(classNameRef);\n  };\n\n  this.emit = function (node, callback) {\n    callback(node, _this.nodes.get(node));\n  };\n\n  this.nodes = new Map();\n};\n\nexports.NodeRegistry = NodeRegistry;\nvar nodeRegistry = new NodeRegistry();\n/**\n * A React hooks that allows to manage classNames on a DOM node in declarative manner. Accepts\n * a HTML element or React ref objects with it.\n *\n * @param {HTMLElement|React.RefObject} node\n * @param {String} className\n */\n\nfunction useClassNamesOnNode(node, className) {\n  var classNameRef = _react.default.useRef();\n\n  var isMounted = _react.default.useRef(false);\n\n  (0, _useIsomorphicLayoutEffect.default)(function () {\n    classNameRef.current = className;\n\n    if (isMounted.current) {\n      var element = (0, _reactComponentRef.isRefObject)(node) ? node.current : node;\n      nodeRegistry.emit(element, handleClassNamesChange);\n    }\n\n    isMounted.current = true;\n  }, [className]);\n  (0, _useIsomorphicLayoutEffect.default)(function () {\n    var element = (0, _reactComponentRef.isRefObject)(node) ? node.current : node;\n    nodeRegistry.add(element, classNameRef);\n    nodeRegistry.emit(element, handleClassNamesChange);\n    return function () {\n      nodeRegistry.del(element, classNameRef);\n      nodeRegistry.emit(element, handleClassNamesChange);\n    };\n  }, [node]);\n}"]},"metadata":{},"sourceType":"script"}