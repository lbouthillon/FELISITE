{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\n\nvar _transform2 = _interopRequireDefault(require(\"lodash/transform\"));\n/**\r\n * Naive and inefficient object difference, intended for development / debugging use only.\r\n * Deleted keys are shown as [DELETED].\r\n * @param {{}} source The source object\r\n * @param {{}} target The target object.\r\n * @returns {{}} A new object containing new/modified/deleted keys.\r\n * @example\r\n * import { objectDiff } from 'src/lib'\r\n *\r\n * const a = { key: 'val', foo: 'bar' }\r\n * const b = { key: 'val', foo: 'baz' }\r\n *\r\n * objectDiff(a, b)\r\n * //=> { foo: 'baz' }\r\n */\n\n\nvar _default = function _default(source, target) {\n  return (0, _transform2.default)(source, function (res, val, key) {\n    // deleted keys\n    if (!(0, _has2.default)(target, key)) res[key] = '[DELETED]'; // new keys / changed values\n    // Note, we tolerate isEqual here as this is a dev only utility and not included in production code\n    else if (!(0, _isEqual2.default)(val, target[key])) res[key] = target[key];\n  }, {});\n};\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/louis/Documents/doc/loisirs/interplateau ludique/FELISITE/front/node_modules/semantic-ui-react/dist/commonjs/lib/objectDiff.js"],"names":["_interopRequireDefault","require","exports","__esModule","default","_isEqual2","_has2","_transform2","_default","source","target","res","val","key"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAGL,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAAtC;;AAEA,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAlC;;AAEA,IAAIM,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,QAAQ,GAAG,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAC/C,SAAO,CAAC,GAAGH,WAAW,CAACH,OAAhB,EAAyBK,MAAzB,EAAiC,UAAUE,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;AAC/D;AACA,QAAI,CAAC,CAAC,GAAGP,KAAK,CAACF,OAAV,EAAmBM,MAAnB,EAA2BG,GAA3B,CAAL,EAAsCF,GAAG,CAACE,GAAD,CAAH,GAAW,WAAX,CAAtC,CAA8D;AAC9D;AADA,SAEK,IAAI,CAAC,CAAC,GAAGR,SAAS,CAACD,OAAd,EAAuBQ,GAAvB,EAA4BF,MAAM,CAACG,GAAD,CAAlC,CAAL,EAA+CF,GAAG,CAACE,GAAD,CAAH,GAAWH,MAAM,CAACG,GAAD,CAAjB;AACrD,GALM,EAKJ,EALI,CAAP;AAMD,CAPD;;AASAX,OAAO,CAACE,OAAR,GAAkBI,QAAlB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nexports.__esModule = true;\r\nexports.default = void 0;\r\n\r\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\"));\r\n\r\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\r\n\r\nvar _transform2 = _interopRequireDefault(require(\"lodash/transform\"));\r\n\r\n/**\r\n * Naive and inefficient object difference, intended for development / debugging use only.\r\n * Deleted keys are shown as [DELETED].\r\n * @param {{}} source The source object\r\n * @param {{}} target The target object.\r\n * @returns {{}} A new object containing new/modified/deleted keys.\r\n * @example\r\n * import { objectDiff } from 'src/lib'\r\n *\r\n * const a = { key: 'val', foo: 'bar' }\r\n * const b = { key: 'val', foo: 'baz' }\r\n *\r\n * objectDiff(a, b)\r\n * //=> { foo: 'baz' }\r\n */\r\nvar _default = function _default(source, target) {\r\n  return (0, _transform2.default)(source, function (res, val, key) {\r\n    // deleted keys\r\n    if (!(0, _has2.default)(target, key)) res[key] = '[DELETED]'; // new keys / changed values\r\n    // Note, we tolerate isEqual here as this is a dev only utility and not included in production code\r\n    else if (!(0, _isEqual2.default)(val, target[key])) res[key] = target[key];\r\n  }, {});\r\n};\r\n\r\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}